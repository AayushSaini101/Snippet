"Insert_ll": {
    "prefix": "_insertll",
    "body":[
        "class Node:" ,
  
        "# Function to initialise the node object", 
        "def __init__(self, data): ",
            "self.data = data",  
            "self.next = None",  
      
      
    "# Linked List class contains a Node object", 
    "class LinkedList:", 
      
        "# Function to initialize head", 
        "def __init__(self):",
            "self.head = None",
      
      
        "# Functio to insert a new node at the beginning", 
        "def push(self, new_data):", 
      
           " # 1 & 2: Allocate the Node &", 
            "#        Put in the data ",
            "new_node = Node(new_data", 
      
            "# 3. Make next of new Node as head",
           " new_node.next = self.head ",
      
            "# 4. Move the head to point to new Node", 
            "self.head = new_node ",
      
      
        "# This function is in LinkedList class. Inserts a", 
        "# new node after the given prev_node. This method is ",
        "# defined inside LinkedList class shown above */ ",
        "def insertAfter(self, prev_node, new_data): ",
      
            "# 1. check if the given prev_node exists" ,
            "if prev_node is None:",
                
               "return",
      
           " #  2. create new node & ",
           " #      Put in the data" ,
           " new_node = Node(new_data)",
      
           " # 4. Make next of new Node as next of prev_node", 
            "new_node.next = prev_node.next",
      
           " # 5. make next of prev_node as new_node ",
           " prev_node.next = new_node ",
      
      
       " # This function is defined in Linked List class ",
       " # Appends a new node at the end.  This method is" ,
        "# defined inside LinkedList class shown above */ ",
      " def append(self, new_data): ,
      
          
      
            last.next =  new_node ,
      
      
       
        def printList(self): ",
           " temp = self.head ",
            "while (temp):" ,
               " print temp.data, ",
                "temp = temp.next",
      
      
      
    "# Code execution starts here ",
   " if __name__=='__main__':" ,
      
        "# Start with the empty list ",
        "llist = LinkedList()" ,
      
        "# Insert 6.  So linked list becomes 6->None", 
        "llist.append(6) ",
      
        "# Insert 7 at the beginning. So linked list becomes 7->6->None" ,
       " llist.push(7); ",
      
        "# Insert 1 at the beginning. So linked list becomes 1->7->6->None ",
        "llist.push(1);", 
      
        "# Insert 4 at the end. So linked list becomes 1->7->6->4->None" ,
       " llist.append(4) ",
      
       " # Insert 8, after 7. So linked list becomes 1 -> 7-> 8-> 6-> 4-> None", 
       " llist.insertAfter(llist.head.next, 8) ",
      
       " print 'Created linked list is:', ",
       " llist.printList()" ,
    ],
    "description": "Insertion in Linked list"

},
"deletion in Linked list": {
    "prefix": "_deletell",
    "body": [
      "class Node: ",
      "	def __init__(self, data): ",
      "		self.data = data ",
      "		self.next = None",
      "",
      "class LinkedList: ",
           "def __init__(self): ",
           "self.head = None",
     
        "	def push(self, new_data): ",
        "		new_node = Node(new_data) ",
        "		new_node.next = self.head ",
        "		self.head = new_node ",
        "	def deleteNode(self, key): ",
        "		# Store head node ",
        "		temp = self.head ",
        
        "		if (temp is not None): ",
        "			if (temp.data == key): ",
        "				self.head = temp.next",
        "				temp = None",
        "				return",
        "",
        "		while(temp is not None): ",
        "			if temp.data == key: ",
        "				break",
        "			prev = temp ",
        "			temp = temp.next",
        
        
        "		if(temp == None): ",
        "			return",
        "		prev.next = temp.next",
        "",
        "		temp = None",
        "",
        
        "	def printList(self): ",
        "		temp = self.head ",
        "		while(temp): ",
        "			print (\" %d\" %(temp.data)), ",
        "			temp = temp.next",
        ],
    "description": "deletion in Linked list"
  },
  "Length of Linked list": {
    "prefix": "_lengthll",
    "body": [
      "class Node: ",
      "	def __init__(self, data): ",
      "		self.data = data ",
      "		self.next = None ",
      "class LinkedList: ",
      "	# Function to initialize head ",
      "	def __init__(self): ",
      "		self.head = None",
      "	def push(self, new_data): ",
      "		new_node = Node(new_data) ",
      "		new_node.next = self.head ",
      "		self.head = new_node ",
      "	def getCount(self): ",
      "		temp = self.head",
      "		count = 0",
      "		while (temp): ",
      "			count += 1",
      "			temp = temp.next",
      "		return count ",
      ""
    ],
    "description": "Length of Linked list"
  }
  "Is Loop": {
    "prefix": "_isLoop",
    "body": [
      "class Node:",
      "    def __init__(self, data):",
      "        self.data = data",
      "        self.next = None",
      " ",
      "class LinkedList:",
      "    def __init__(self):",
      "        self.head = None",
      "    def push(self, new_data):",
      "        new_node = Node(new_data)",
      "        new_node.next = self.head",
      "        self.head = new_node",
      "    def printList(self):",
      "        temp = self.head",
      "        while(temp):",
      "            print(temp.data, end=\" \")",
      "            temp = temp.next",
      " ",
      "    def detectLoop(self):",
      "        s = set()",
      "        temp = self.head",
      "        while (temp):",
      "            if (temp in s):",
      "                return True",
      "            s.add(temp)",
      "            temp = temp.next",
      "        return False",
      ""
    ],
    "description": "Is Loop"
  }
