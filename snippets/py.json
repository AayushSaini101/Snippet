"Insert_ll": {
    "prefix": "_insertll",
    "body":[
        "Insert_ll": {
  "prefix": "_insertll",
  "body": [
    "class Node:",
    "    def __init__(self,data):",
    "        self.data = data",
    "        self.next = None",
    "class ll_initialize:",
    "    def __init__(self):",
    "        self.head = None",
    "    def push(self,data):",
    "        new_node = Node(data)",
    "        new_node.next = self.head",
    "        self.head = new_node",
    
    "    def insertAfter(self, prev_node, new_data): ",
  
    "        if prev_node is None: ",
    "            print (\"The given previous node must inLinkedList.\")",
    "            return",
  
    "        new_node = Node(new_data) ",
    "        new_node.next = prev_node.next",
    "        prev_node.next = new_node ",
  
  ],
  "description": "Insert_ll"
},


"deletion in Linked list": {
    "prefix": "_deletell",
    "body": [
      "class Node: ",
      "	def __init__(self, data): ",
      "		self.data = data ",
      "		self.next = None",
    
      "class LinkedList: ",
           "def __init__(self): ",
           "self.head = None",
     
        "	def push(self, new_data): ",
        "		new_node = Node(new_data) ",
        "		new_node.next = self.head ",
        "		self.head = new_node ",
        "	def deleteNode(self, key): ",
        "		# Store head node ",
        "		temp = self.head ",
        
        "		if (temp is not None): ",
        "			if (temp.data == key): ",
        "				self.head = temp.next",
        "				temp = None",
        "				return",
        "",
        "		while(temp is not None): ",
        "			if temp.data == key: ",
        "				break",
        "			prev = temp ",
        "			temp = temp.next",
        
        
        "		if(temp == None): ",
        "			return",
        "		prev.next = temp.next",
       
        "		temp = None",
       
        
        "	def printList(self): ",
        "		temp = self.head ",
        "		while(temp): ",
        "			print (\" %d\" %(temp.data)), ",
        "			temp = temp.next",
        ],
    "description": "deletion in Linked list"
  },
  "Length of Linked list": {
    "prefix": "_lengthll",
    "body": [
      "class Node: ",
      "	def __init__(self, data): ",
      "		self.data = data ",
      "		self.next = None ",
      "class LinkedList: ",
      "	# Function to initialize head ",
      "	def __init__(self): ",
      "		self.head = None",
      "	def push(self, new_data): ",
      "		new_node = Node(new_data) ",
      "		new_node.next = self.head ",
      "		self.head = new_node ",
      "	def getCount(self): ",
      "		temp = self.head",
      "		count = 0",
      "		while (temp): ",
      "			count += 1",
      "			temp = temp.next",
      "		return count ",
    
    ],
    "description": "Length of Linked list"
  },
  "Is Loop": {
    "prefix": "_isLoop",
    "body": [
      "class Node:",
      "    def __init__(self, data):",
      "        self.data = data",
      "        self.next = None",
      " ",
      "class LinkedList:",
      "    def __init__(self):",
      "        self.head = None",
      "    def push(self, new_data):",
      "        new_node = Node(new_data)",
      "        new_node.next = self.head",
      "        self.head = new_node",
      "    def printList(self):",
      "        temp = self.head",
      "        while(temp):",
      "            print(temp.data, end=\" \")",
      "            temp = temp.next",
      
      "    def detectLoop(self):",
      "        s = set()",
      "        temp = self.head",
      "        while (temp):",
      "            if (temp in s):",
      "                return True",
      "            s.add(temp)",
      "            temp = temp.next",
      "        return False",
    ],
    "description": "Is Loop"
  }
