{

	"FastScanner": {
		"prefix": "Fast",
		"body": [
		  "import java.util.*;",
		  "import java.io.*;",
		  "class FastScanner{",
		  "BufferedReader br=new BufferedReader(new InputStreamReader(System.in));",
		  "StringTokenizer st=new StringTokenizer(\"\");",
		  "String next() {",
		  "while(!st.hasMoreTokens()) {",
		  "try {",
		  "st=new StringTokenizer(br.readLine());",
		  "}",
		  "catch(IOException e) {",
		  "e.printStackTrace();",
		  "}",
		  "}",
		  "return st.nextToken();",
		  "}",
		  "int nextInt() {",
		  "return Integer.parseInt(next());",
		  "}",
		  "long nextLong() {",
		  "return Long.parseLong(next());",
		  "}",
		  "String nextLine() {",
		  "String str = \"\";",
		  "try {",
		  "str = br.readLine();",
		  "} catch (IOException e) {",
		  "e.printStackTrace();",
		  "}",
		  "return str;",
		  "}}"
		],
		"description": "User-DefinedClass"
	  }
	
,

"Methodtofindmaximumnumberofprimefactorswithinagivenrange.": {
  "prefix": "maxPrimeFctorsWithinRange",
  "body": [
    "static int maxPrimeFactor(int m ,int n)",
    "{",
    "long factorCount[] = new long[n + 1];",
    "boolean prime[] = new boolean[n + 1];",
    "",
    "for(int i = 0;i < n;i++)",
    "{",
    "factorCount[i] = 0;",
    "prime[i] = true;",
    "}",
    "for(int i = 2;i <= n;i++)",
    "{",
    "if(prime[i] == true)",
    "{",
    "factorCount[i] = 1;",
    "for(int j = i * 2;j <= n;j=j+i)",
    "{",
    "factorCount[j]++;",
    "prime[j] = false;",
    "}",
    "}",
    "}",
    "int max = (int)factorCount[m];",
    "int num = m;",
    "",
    "for(int i = m;i <= n;i++)",
    "{",
    "if(factorCount[i] > max)",
    "{",
    "max = (int)factorCount[i];",
    "num = i;",
    "}",
    "}",
    "return num;",
    "}"
  ],
  "description": "Method to find maximum number of prime factors within a given range."
}
,
"BubbleSort": {
	"prefix": "$_BubbleSort_$",
	"body": [
	  "void BubbleSort(int a[]){",
	  "int temp=0;",
	  "boolean swap=false;",
	  "for(int i=0;i<a.length;++i){",
	  "swap=false;",
	  "for(int j=0;j<=a.length-1-i;++j){",
	  "if(a[j]>a[j+1]){",
	  " //swap the numbers",
	  "temp=a[j];",
	  "a[j]=a[j+1]",
	  "a[j+1]=temp;",
	  "swap=true;",
	  "}",
	  "}",
	  "if(swap==false){",
	  "return ;",
	  "}",
	  "}",
	  "}"
	],
	"description": "StableBubbleSortAlgorithm"
  }
  ,
  "InsertionSort": {
	"prefix": "$_InsertionSort_$",
	"body": [
	  "",
	  "void Insertionsort(int a[]){",
	  "for(int i=0;i<a.length;++i){",
	  "int key=a[i];",
	  "int  j=i-1;",
	  "while(j>=0&&a[key]>key){",
	  "a[j+1]=a[j];",
	  "--j; ",
	  "}",
	  "a[j+1]=key;   ",
	  "}",
	  "}"
	],
	"description": "StableInsertionsort"
  }
  ,
  "SelectionSort": {
	"prefix": "$_SelectionSort_$",
	"body": [
	  "void SelectionSort(int a[]){ ",
	  "//Selection sort",
	  "for(int i=0;i<a.length;++i){",
	  "int minindex=i;",
	  "for(int j=i+1;i<a.length;++j){",
	  "if(a[j]<a[minindex]){",
	  "minindex=j;",
	  "}",
	  "}",
	  "//swap the position",
	  "int temp=a[i];",
	  "a[i]=a[minindex];",
	  "a[minindex]=temp;",
	  "}",
	  "}"
	],
	"description": "UnstableSelectionSort"
  }
  ,
  "MergeSort": {
	"prefix": "$_MergeSort_$",
	"body": [
	  "static void mergesort(int numbers[],int start,int mid,int end){",
	  " //Out place sorting algorithm",
	  " int First[]=new int[mid-start+1];",
	  " int second[]=new int[end-mid];",
	  " //Fill the elements",
	  " int index1=0;",
	  " int index2=0;",
	  " int index3=start;",
	  " ",
	  " for(int i=start;i<=mid;++i){",
	  " First[index1++]=numbers[i];",
	  " }",
	  " for(int j=mid+1;j<=end;++j){",
	  " second[index2++]=numbers[j];",
	  " }",
	  " int i=0;",
	  " int j=0;",
	  " while(i<First.length&&j<second.length){",
	  " if(First[i]>second[j]){",
	  " numbers[start++]=second[j];",
	  " ++j;",
	  " }",
	  " else{",
	  " numbers[start++]=First[i];",
	  " ++i;",
	  " }",
	  " }",
	  " while(i<First.length){",
	  " numbers[start++]=First[i++];",
	  " }",
	  " while(j<second.length){",
	  " numbers[start++]=second[j++];",
	  " }",
	  "",
	  "",
	  " }",
	  "static void print(int a[]){",
	  " for(int i=0;i<a.length;++i){",
	  " System.out.print(a[i]+\" \");",
	  " }",
	  "}"
	],
	"description": "StableMergeSort"
  }
  ,
  "StringSubstring": {
	"prefix": "$_Substring_$",
	"body": [
	  "static void Stringsubstring(String m,String ans,int index){",
	  " if(index==m.length()){",
	  " System.out.println(ans);",
	  " return;",
	  " ",
	  " }",
	  " Stringsubstring(m,ans+m.charAt(index),++index);",
	  " --index;",
	  " Stringsubstring(m,ans,++index);",
	  "}"
	],
	"description": "RecursiveCodeofSubstring"
  }
  ,
  "Primenumberchecker": {
	"prefix": "$_primeChecker_$",
	"body": [
	  " static boolean checkprime(int n){",
	  " if(n==1) return false;",
	  " if(n==2||n==3) return true;",
	  " if(n%2==0||n%3==0)return false;",
	  "//Every Prime number except 2 and 3 are in the form of 6k+1 or 6k-1",
	  " for(int i=6;i*i<=n;i+=6){",
	  " if(n%(i-1)==0||n%(i+1)==0)return false;",
	  " }",
	  " return true;",
	  " }"
	],
	"description": "EfficientAlgorithmtochecktheprimenumber"
  }
  ,
  "SievePrimenumber": {
	"prefix": "$_PrimenumberFinder_Sieve_$",
	"body": [
	  " static boolean bl[]=new boolean[2000];",
	  "static boolean sieve(int n){",
	  " Arrays.fill(bl, true);",
	  " for(int i=0;i<bl.length;++i){",
	  " if(i%2==0){",
	  " bl[i]=false;",
	  " }",
	  " if(i%3==0){",
	  " bl[i]=false;",
	  " }",
	  " }",
	  "//Filling the sieve array",
	  "for(int i=2;i<Math.sqrt(bl.length);++i){",
	  " for(int j=i*i;j<bl.length;j+=i){",
	  " if(bl[j]==true){",
	  " bl[j]=false;",
	  " }",
	  " }",
	  "}",
	  "return bl[n];"
	],
	"description": ""
  }
}